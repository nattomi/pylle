#!/usr/bin/python
# --------
# settings
# --------
safetygap = 0.05 # time to wait (in seconds) before reading out buffer content during daq
bufferLength = 10 # length of a buffer (in seconds)
simMode = True # set this to True to enter simulation mode
CFG = ['srate 65535' + '\r', # config lines for the logger
       'slist 0 x0000' + '\r',
       'asc' + '\r']
wd = '/tmp/cso' # working directory 
customScript = '' # you can specify a custom script here which can be run after each buffer readout to perform a specific task (such as uploading buffer content into a relational database) as a detached process. Use an empty string if there is no need to perform anything.

# ---------
# modules
# ---------
import time
import serial
import os
from daemon import runner

# ---------
# Functions
# ---------
def readBuffer(s): # reads the current content of the buffer of a DATAQ data logger connected via serial port. s is a serial object created via serial.Serial
    ans = ''
    while s.inWaiting() > 0:
        buffItem = ser.read(1)
        if buffItem == '\r':
            buffItem = '\n'
            ans += buffItem
    return ans
        
def dummyCSO(n): # used to generate dummy buffer content readouts in simulation mode
    ans = 'start\n'
    for i in range(0,n):
        ans += 'sc 0\n'
    ans += 'stop'
    return ans

def stopAndWriteCso(safetygap,filename,timestamp,simMode): # sends a stop command to DATAQ and reads out any leftovers
    if not simMode:
        ser.write('stop' + '\r') # stop daq
    time.sleep(safetygap)
    if not simMode:
        out = readBuffer(ser) # reading out buffer content
    else:
        out = dummyCSO(100)
    print "Writing buffer content to " + filename
    with open(filename, "w") as f:
        f.write(repr(timestamp) + '\n' + out)

class App():
    def __init__(self):
        self.stdin_path = '/dev/null'
        self.stderr_path = '/tmp/info'
        self.stdout_path = '/tmp/info'
        self.pidfile_path =  '/tmp/dataq.pid'
        self.pidfile_timeout = 5

    def run(self):
        connected = False # at startup, the A/D converter is not connected
        withCustomScript = len(customScript) > 0
        if (withCustomScript):
            from subprocess import Popen
        if not simMode:
            try:
                ser = serial.Serial(port='/dev/ttyACM0',
                                    baudrate=115200,
                                    parity=serial.PARITY_NONE,
                                    bytesize=serial.EIGHTBITS,
                                    stopbits=serial.STOPBITS_ONE)
                connected = True
            except serial.SerialException:
                print "No connection to the device could be established"
        else:
            print "Running in simulation mode"
        # if we are in simulation mode, then we set connected to True
        if simMode:
            connected = True
        if connected:
            print "Device is ready, sending configuration commands..."
            # configuring device
            if not simMode:
                for cfg in CFG:
                    ser.write(cfg)
            # reading out buffer content)
            time.sleep(0.1)
            print "Success!(?) Requested setup is"
            if not simMode:
                setup = readBuffer(ser)
                print setup
            else:
                for cfg in CFG:
                    print cfg
            d = time.strftime("%Y%m%d_%H%M%S", time.gmtime())
            logdir = os.path.join(wd,d)
            if not os.path.exists(logdir):
                os.makedirs(logdir)
            print "Directory \"" + logdir + "\" (succesfully?) created..."
            print "Starting data aquisition..."
            
            i = 0
            try:
                while True:
                    # starting data aquisition to buffer
                    basename = "%08d.cso" % i
                    timestamp = time.time()
                    if not simMode:
                        ser.write('start' + '\r') # start daq
                    time.sleep(bufferLength)
                    filename = os.path.join(logdir,basename)
                    stopAndWriteCso(safetygap,filename,timestamp,simMode)
                    if (withCustomScript): # starting independent subprocess for performing extra tasks
                        cmdCustom = [customScript,filename]
                        Popen(cmdCustom)
                    i += 1
            except:
                filename = os.path.join(logdir,basename)
                stopAndWriteCso(0.1,filename,timestamp,simMode)
                if not simMode:
                    ser.close() # closing port
                print 'chunk: ' + filename 

app = App() 
daemon_runner = runner.DaemonRunner(app)
daemon_runner.do_action()
